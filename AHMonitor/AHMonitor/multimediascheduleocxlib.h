/****************************************************************************
**
** Namespace MultimediaScheduleOcxLib generated by dumpcpp v5.9.0 using
** dumpcpp.exe {8BAD5304-6F7B-4606-B1ED-31679DD8528B}
** from the type library C:\Windows\SysWow64\MultimediaScheduleOcx.ocx
**
****************************************************************************/

#ifndef QAX_DUMPCPP_MULTIMEDIASCHEDULEOCXLIB_H
#define QAX_DUMPCPP_MULTIMEDIASCHEDULEOCXLIB_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef MULTIMEDIASCHEDULEOCXLIB_EXPORT
#define MULTIMEDIASCHEDULEOCXLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace MultimediaScheduleOcxLib {


class MULTIMEDIASCHEDULEOCXLIB_EXPORT _DMultimediaScheduleOcx : public QAxObject
{
public:
    _DMultimediaScheduleOcx(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AboutBox

    For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void AboutBox();

    /*
    Method answerCall

    method answerCall
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int answerCall(int callId, int nHand);

    /*
    Method audioMeetAddMember

    method audioMeetAddMember
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int audioMeetAddMember(wint_t* strMeetID, wint_t* memberSip);

    /*
    Method audioMeetDelMember

    method audioMeetDelMember
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int audioMeetDelMember(wint_t* strMeetID, wint_t* memberSip);

    /*
    Method callThroughConn

    method callThroughConn
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void callThroughConn(int nCallId, wint_t* strDestSip);

    /*
    Method createAudioBroadcast

    方法createAudioBroadcast
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int createAudioBroadcast(const QString& strMembers, int nHand, const QString& filePath);

    /*
    Method createAudioMeet

    method createAudioMeet
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int createAudioMeet(wint_t* strMembers, int nHand);

    /*
    Method createPttGroupURL

    method createPttGroupURL
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void createPttGroupURL(wint_t* strServer, int nPort, wint_t* groupID, wint_t* strGroupName, wint_t* strMySip, wint_t* strMembers);

    /*
    Method createVideoMeet

    method createVideoMeet
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int createVideoMeet(wint_t* memberSip, int nHand);

    /*
    Method delTempPttGroup

    method delTempPttGroup
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void delTempPttGroup(wint_t* strBigGroupID, wint_t* strSmallGroupID);

    /*
    Method deletePttGroupURL

    method deletePttGroupURL
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void deletePttGroupURL(wint_t* strServer, int nPort, wint_t* groupID);

    /*
    Method destroyOcx

    method destroyOcx
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void destroyOcx();

    /*
    Method endPtt

    method endPtt
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void endPtt(wint_t* csGroupNum);

    /*
    Method endVideoMeet

    method endVideoMeet
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int endVideoMeet(int nCallId);

    /*
    Method getAudioDeviceList

    方法getAudioDeviceList
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline QString getAudioDeviceList();

    /*
    Method getCurrentGroup

    method getCurrentGroup
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline QString getCurrentGroup();

    /*
    Method getDefaultGroup

    method getDefaultGroup
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline QString getDefaultGroup();

    /*
    Method getGroupState

    method getGroupState
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int getGroupState(wint_t* pttGroupNum);

    /*
    Method getPhysicsHandCount

    method getPhysicsHandCount
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int getPhysicsHandCount();

    /*
    Method getPttGroupMemberState

    method getPttGroupMemberState
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int getPttGroupMemberState(wint_t* strGroupID, wint_t* strMemberID);

    /*
    Method hangUpCall

    method hangUpCall
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int hangUpCall(int callId);

    /*
    Method isVideoConversation

    method isVideoConversation
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int isVideoConversation(int callId);

    /*
    Method makeAudioCall

    method makeAudioCall
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int makeAudioCall(const QString& destNumber, int nHand);

    /*
    Method makeAudioCallWithFile

    method makeAudioCallWithFile
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int makeAudioCallWithFile(const QString& destNumber, const QString& filePath);

    /*
    Method makePttCall

    method makePttCall
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int makePttCall(wint_t* dest, int audioDev, int join);

    /*
    Method makeVideoCall

    method makeVideoCall
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int makeVideoCall(const QString& destNumber, int hWnd, int nHand);

    /*
    Method makeVideoMonitorCall

    方法makeVideoMonitorCall
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int makeVideoMonitorCall(const QString& destNumber, int nHand);

    /*
    Method modifyPttGroupURL

    method modifyPttGroupURL
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void modifyPttGroupURL(wint_t* strServer, int nPort, wint_t* groupID, wint_t* strGroupName, wint_t* strMySip, wint_t* strMembers);

    /*
    Method ptzControl

    method ptzControl
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void ptzControl(wint_t* strSIP, wint_t* strControlType, bool isDown);

    /*
    Method queryVideoDispatch

    method queryVideoDispatch
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline QString queryVideoDispatch();

    /*
    Method registerSip

    method registerSip
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int registerSip(const QString& user, const QString& pwd, const QString& server, int port);

    /*
    Method remoteControlLocation

    method remoteControlLocation
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int remoteControlLocation(wint_t* strDestSip, bool bOpen);

    /*
    Method requestPtt

    method requestPtt
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void requestPtt(int opt);

    /*
    Method sendSMS

    method sendSMS
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int sendSMS(const QString& strSIP, const QString& strContent);

    /*
    Method sendSmsEx

    方法sendSmsEx
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int sendSmsEx(const QString& strSIP, const QString& strContent, const QString& extension, const QString& strType);

    /*
    Method setAudioDeviceIndex

    方法setAudioDeviceIndex
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setAudioDeviceIndex(int type, int sIndex, int mIndex);

    /*
    Method setConfigInfo

    方法setConfigInfo
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setConfigInfo(const QString& key, const QString& value);

    /*
    Method setMute

    method setMute
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setMute(int callId, bool bMute);

    /*
    Method setMuteEx

    方法setMuteEx
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setMuteEx(int callId, bool bRx, bool bMute);

    /*
    Method setPreviewWindow

    方法setPreviewWindow
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline uint setPreviewWindow(uint hWnd);

    /*
    Method setTempPttGroup

    method setTempPttGroup
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void setTempPttGroup(wint_t* strLargeGroupNo, wint_t* strGroupName, wint_t* strGroupMember);

    /*
    Method setVideoBitRate

    method setVideoBitRate
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setVideoBitRate(int nBitRate);

    /*
    Method setVideoInfo

    method setVideoInfo
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setVideoInfo(int nDropeedFrame, int nBuffer, int nPlayMode);

    /*
    Method setVideoResolution

    method setVideoResolution
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setVideoResolution(int nWidth, int nHeight);

    /*
    Method setVideoRotate

    方法setVideoRotate
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void setVideoRotate(int callId, bool bClockWise);

    /*
    Method setVideoTransmit

    method setVideoTransmit
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void setVideoTransmit(int call_id, int txFlag);

    /*
    Method setVideoWnd

    method setVideoWnd
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setVideoWnd(int callId, int hWnd);

    /*
    Method startVideoDispatch

    method startVideoDispatch
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void startVideoDispatch(wint_t* strSrcNum, wint_t* strDestNum);

    /*
    Method startVideoRecord

    方法startVideoRecord
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int startVideoRecord(const QString& strFileName, int callId);

    /*
    Method stopVideoDispatch

    method stopVideoDispatch
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void stopVideoDispatch(wint_t* strChanName, wint_t* strDestNum);

    /*
    Method stopVideoRecord

    方法stopVideoRecord
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void stopVideoRecord(int callId);

    /*
    Method subscribeAllPttGroupInfo

    method subscribeAllPttGroupInfo
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void subscribeAllPttGroupInfo();

    /*
    Method subscribeUserState

    方法subscribeUserState
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int subscribeUserState(const QString& number, int type);

    /*
    Method switchGroup

    method switchGroup
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void switchGroup(wint_t* csGroupNum);

    /*
    Method takeVideoPicture

    方法takeVideoPicture
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int takeVideoPicture(const QString& strFileName, int callId);

    /*
    Method unregisterSip

    方法unregisterSip
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void unregisterSip();

    /*
    Method videoMeetAddMember

    method videoMeetAddMember
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int videoMeetAddMember(wint_t* strMeetID, wint_t* memberSip);

    /*
    Method videoMeetDelMember

    method videoMeetDelMember
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int videoMeetDelMember(wint_t* strMeetID, wint_t* memberSip);

    /*
    Method videoMeetPlayVideo

    method videoMeetPlayVideo
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int videoMeetPlayVideo(int hWnd, int nCallId, wint_t* strSipNum);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _DMultimediaScheduleOcxEvents

// Actual coclasses
class MULTIMEDIASCHEDULEOCXLIB_EXPORT MultimediaScheduleOcx : public QAxWidget
{
public:
    MultimediaScheduleOcx(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{3184b8df-4d45-4664-b6d0-d4232294b2b2}");
    }

    MultimediaScheduleOcx(_DMultimediaScheduleOcx *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method AboutBox

    For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void AboutBox();

    /*
    Method answerCall

    method answerCall
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int answerCall(int callId, int nHand);

    /*
    Method audioMeetAddMember

    method audioMeetAddMember
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int audioMeetAddMember(wint_t* strMeetID, wint_t* memberSip);

    /*
    Method audioMeetDelMember

    method audioMeetDelMember
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int audioMeetDelMember(wint_t* strMeetID, wint_t* memberSip);

    /*
    Method callThroughConn

    method callThroughConn
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void callThroughConn(int nCallId, wint_t* strDestSip);

    /*
    Method createAudioBroadcast

    ????createAudioBroadcast
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int createAudioBroadcast(const QString& strMembers, int nHand, const QString& filePath);

    /*
    Method createAudioMeet

    method createAudioMeet
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int createAudioMeet(wint_t* strMembers, int nHand);

    /*
    Method createPttGroupURL

    method createPttGroupURL
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void createPttGroupURL(wint_t* strServer, int nPort, wint_t* groupID, wint_t* strGroupName, wint_t* strMySip, wint_t* strMembers);

    /*
    Method createVideoMeet

    method createVideoMeet
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int createVideoMeet(wint_t* memberSip, int nHand);

    /*
    Method delTempPttGroup

    method delTempPttGroup
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void delTempPttGroup(wint_t* strBigGroupID, wint_t* strSmallGroupID);

    /*
    Method deletePttGroupURL

    method deletePttGroupURL
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void deletePttGroupURL(wint_t* strServer, int nPort, wint_t* groupID);

    /*
    Method destroyOcx

    method destroyOcx
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void destroyOcx();

    /*
    Method endPtt

    method endPtt
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void endPtt(wint_t* csGroupNum);

    /*
    Method endVideoMeet

    method endVideoMeet
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int endVideoMeet(int nCallId);

    /*
    Method getAudioDeviceList

    ????getAudioDeviceList
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline QString getAudioDeviceList();

    /*
    Method getCurrentGroup

    method getCurrentGroup
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline QString getCurrentGroup();

    /*
    Method getDefaultGroup

    method getDefaultGroup
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline QString getDefaultGroup();

    /*
    Method getGroupState

    method getGroupState
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int getGroupState(wint_t* pttGroupNum);

    /*
    Method getPhysicsHandCount

    method getPhysicsHandCount
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int getPhysicsHandCount();

    /*
    Method getPttGroupMemberState

    method getPttGroupMemberState
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int getPttGroupMemberState(wint_t* strGroupID, wint_t* strMemberID);

    /*
    Method hangUpCall

    method hangUpCall
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int hangUpCall(int callId);

    /*
    Method isVideoConversation

    method isVideoConversation
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int isVideoConversation(int callId);

    /*
    Method makeAudioCall

    method makeAudioCall
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int makeAudioCall(const QString& destNumber, int nHand);

    /*
    Method makeAudioCallWithFile

    method makeAudioCallWithFile
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int makeAudioCallWithFile(const QString& destNumber, const QString& filePath);

    /*
    Method makePttCall

    method makePttCall
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int makePttCall(wint_t* dest, int audioDev, int join);

    /*
    Method makeVideoCall

    method makeVideoCall
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int makeVideoCall(const QString& destNumber, int hWnd, int nHand);

    /*
    Method makeVideoMonitorCall

    ????makeVideoMonitorCall
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int makeVideoMonitorCall(const QString& destNumber, int nHand);

    /*
    Method modifyPttGroupURL

    method modifyPttGroupURL
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void modifyPttGroupURL(wint_t* strServer, int nPort, wint_t* groupID, wint_t* strGroupName, wint_t* strMySip, wint_t* strMembers);

    /*
    Method ptzControl

    method ptzControl
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void ptzControl(wint_t* strSIP, wint_t* strControlType, bool isDown);

    /*
    Method queryVideoDispatch

    method queryVideoDispatch
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline QString queryVideoDispatch();

    /*
    Method registerSip

    method registerSip
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int registerSip(const QString& user, const QString& pwd, const QString& server, int port);

    /*
    Method remoteControlLocation

    method remoteControlLocation
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int remoteControlLocation(wint_t* strDestSip, bool bOpen);

    /*
    Method requestPtt

    method requestPtt
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void requestPtt(int opt);

    /*
    Method sendSMS

    method sendSMS
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int sendSMS(const QString& strSIP, const QString& strContent);

    /*
    Method sendSmsEx

    ????sendSmsEx
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int sendSmsEx(const QString& strSIP, const QString& strContent, const QString& extension, const QString& strType);

    /*
    Method setAudioDeviceIndex

    ????setAudioDeviceIndex
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setAudioDeviceIndex(int type, int sIndex, int mIndex);

    /*
    Method setConfigInfo

    ????setConfigInfo
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setConfigInfo(const QString& key, const QString& value);

    /*
    Method setMute

    method setMute
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setMute(int callId, bool bMute);

    /*
    Method setMuteEx

    ????setMuteEx
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setMuteEx(int callId, bool bRx, bool bMute);

    /*
    Method setPreviewWindow

    ????setPreviewWindow
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline uint setPreviewWindow(uint hWnd);

    /*
    Method setTempPttGroup

    method setTempPttGroup
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void setTempPttGroup(wint_t* strLargeGroupNo, wint_t* strGroupName, wint_t* strGroupMember);

    /*
    Method setVideoBitRate

    method setVideoBitRate
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setVideoBitRate(int nBitRate);

    /*
    Method setVideoInfo

    method setVideoInfo
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setVideoInfo(int nDropeedFrame, int nBuffer, int nPlayMode);

    /*
    Method setVideoResolution

    method setVideoResolution
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setVideoResolution(int nWidth, int nHeight);

    /*
    Method setVideoRotate

    ????setVideoRotate
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void setVideoRotate(int callId, bool bClockWise);

    /*
    Method setVideoTransmit

    method setVideoTransmit
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void setVideoTransmit(int call_id, int txFlag);

    /*
    Method setVideoWnd

    method setVideoWnd
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int setVideoWnd(int callId, int hWnd);

    /*
    Method startVideoDispatch

    method startVideoDispatch
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void startVideoDispatch(wint_t* strSrcNum, wint_t* strDestNum);

    /*
    Method startVideoRecord

    ????startVideoRecord
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int startVideoRecord(const QString& strFileName, int callId);

    /*
    Method stopVideoDispatch

    method stopVideoDispatch
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void stopVideoDispatch(wint_t* strChanName, wint_t* strDestNum);

    /*
    Method stopVideoRecord

    ????stopVideoRecord
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void stopVideoRecord(int callId);

    /*
    Method subscribeAllPttGroupInfo

    method subscribeAllPttGroupInfo
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void subscribeAllPttGroupInfo();

    /*
    Method subscribeUserState

    ????subscribeUserState
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int subscribeUserState(const QString& number, int type);

    /*
    Method switchGroup

    method switchGroup
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void switchGroup(wint_t* csGroupNum);

    /*
    Method takeVideoPicture

    ????takeVideoPicture
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int takeVideoPicture(const QString& strFileName, int callId);

    /*
    Method unregisterSip

    ????unregisterSip
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline void unregisterSip();

    /*
    Method videoMeetAddMember

    method videoMeetAddMember
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int videoMeetAddMember(wint_t* strMeetID, wint_t* memberSip);

    /*
    Method videoMeetDelMember

    method videoMeetDelMember
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int videoMeetDelMember(wint_t* strMeetID, wint_t* memberSip);

    /*
    Method videoMeetPlayVideo

    method videoMeetPlayVideo
For more information, see help context 0 in C:\Windows\SysWow64\MultimediaScheduleOcx.hlp.
    */
    inline int videoMeetPlayVideo(int hWnd, int nCallId, wint_t* strSipNum);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_MULTIMEDIASCHEDULEOCXLIB_NOINLINES
inline void _DMultimediaScheduleOcx::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline int _DMultimediaScheduleOcx::answerCall(int callId, int nHand)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&callId, (void*)&nHand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::audioMeetAddMember(wint_t* strMeetID, wint_t* memberSip)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strMeetID, (void*)&memberSip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::audioMeetDelMember(wint_t* strMeetID, wint_t* memberSip)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strMeetID, (void*)&memberSip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void _DMultimediaScheduleOcx::callThroughConn(int nCallId, wint_t* strDestSip)
{
    void *_a[] = {0, (void*)&nCallId, (void*)&strDestSip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline int _DMultimediaScheduleOcx::createAudioBroadcast(const QString& strMembers, int nHand, const QString& filePath)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strMembers, (void*)&nHand, (void*)&filePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::createAudioMeet(wint_t* strMembers, int nHand)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strMembers, (void*)&nHand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void _DMultimediaScheduleOcx::createPttGroupURL(wint_t* strServer, int nPort, wint_t* groupID, wint_t* strGroupName, wint_t* strMySip, wint_t* strMembers)
{
    void *_a[] = {0, (void*)&strServer, (void*)&nPort, (void*)&groupID, (void*)&strGroupName, (void*)&strMySip, (void*)&strMembers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline int _DMultimediaScheduleOcx::createVideoMeet(wint_t* memberSip, int nHand)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&memberSip, (void*)&nHand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void _DMultimediaScheduleOcx::delTempPttGroup(wint_t* strBigGroupID, wint_t* strSmallGroupID)
{
    void *_a[] = {0, (void*)&strBigGroupID, (void*)&strSmallGroupID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void _DMultimediaScheduleOcx::deletePttGroupURL(wint_t* strServer, int nPort, wint_t* groupID)
{
    void *_a[] = {0, (void*)&strServer, (void*)&nPort, (void*)&groupID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void _DMultimediaScheduleOcx::destroyOcx()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void _DMultimediaScheduleOcx::endPtt(wint_t* csGroupNum)
{
    void *_a[] = {0, (void*)&csGroupNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline int _DMultimediaScheduleOcx::endVideoMeet(int nCallId)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&nCallId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline QString _DMultimediaScheduleOcx::getAudioDeviceList()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline QString _DMultimediaScheduleOcx::getCurrentGroup()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline QString _DMultimediaScheduleOcx::getDefaultGroup()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::getGroupState(wint_t* pttGroupNum)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pttGroupNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::getPhysicsHandCount()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::getPttGroupMemberState(wint_t* strGroupID, wint_t* strMemberID)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strGroupID, (void*)&strMemberID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::hangUpCall(int callId)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&callId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::isVideoConversation(int callId)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&callId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::makeAudioCall(const QString& destNumber, int nHand)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&destNumber, (void*)&nHand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::makeAudioCallWithFile(const QString& destNumber, const QString& filePath)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&destNumber, (void*)&filePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::makePttCall(wint_t* dest, int audioDev, int join)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dest, (void*)&audioDev, (void*)&join};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::makeVideoCall(const QString& destNumber, int hWnd, int nHand)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&destNumber, (void*)&hWnd, (void*)&nHand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::makeVideoMonitorCall(const QString& destNumber, int nHand)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&destNumber, (void*)&nHand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline void _DMultimediaScheduleOcx::modifyPttGroupURL(wint_t* strServer, int nPort, wint_t* groupID, wint_t* strGroupName, wint_t* strMySip, wint_t* strMembers)
{
    void *_a[] = {0, (void*)&strServer, (void*)&nPort, (void*)&groupID, (void*)&strGroupName, (void*)&strMySip, (void*)&strMembers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void _DMultimediaScheduleOcx::ptzControl(wint_t* strSIP, wint_t* strControlType, bool isDown)
{
    void *_a[] = {0, (void*)&strSIP, (void*)&strControlType, (void*)&isDown};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline QString _DMultimediaScheduleOcx::queryVideoDispatch()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::registerSip(const QString& user, const QString& pwd, const QString& server, int port)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&user, (void*)&pwd, (void*)&server, (void*)&port};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::remoteControlLocation(wint_t* strDestSip, bool bOpen)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strDestSip, (void*)&bOpen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline void _DMultimediaScheduleOcx::requestPtt(int opt)
{
    void *_a[] = {0, (void*)&opt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline int _DMultimediaScheduleOcx::sendSMS(const QString& strSIP, const QString& strContent)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strSIP, (void*)&strContent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::sendSmsEx(const QString& strSIP, const QString& strContent, const QString& extension, const QString& strType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strSIP, (void*)&strContent, (void*)&extension, (void*)&strType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::setAudioDeviceIndex(int type, int sIndex, int mIndex)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&type, (void*)&sIndex, (void*)&mIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::setConfigInfo(const QString& key, const QString& value)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&key, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::setMute(int callId, bool bMute)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&callId, (void*)&bMute};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::setMuteEx(int callId, bool bRx, bool bMute)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&callId, (void*)&bRx, (void*)&bMute};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline uint _DMultimediaScheduleOcx::setPreviewWindow(uint hWnd)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&hWnd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline void _DMultimediaScheduleOcx::setTempPttGroup(wint_t* strLargeGroupNo, wint_t* strGroupName, wint_t* strGroupMember)
{
    void *_a[] = {0, (void*)&strLargeGroupNo, (void*)&strGroupName, (void*)&strGroupMember};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline int _DMultimediaScheduleOcx::setVideoBitRate(int nBitRate)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&nBitRate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::setVideoInfo(int nDropeedFrame, int nBuffer, int nPlayMode)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&nDropeedFrame, (void*)&nBuffer, (void*)&nPlayMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::setVideoResolution(int nWidth, int nHeight)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&nWidth, (void*)&nHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline void _DMultimediaScheduleOcx::setVideoRotate(int callId, bool bClockWise)
{
    void *_a[] = {0, (void*)&callId, (void*)&bClockWise};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void _DMultimediaScheduleOcx::setVideoTransmit(int call_id, int txFlag)
{
    void *_a[] = {0, (void*)&call_id, (void*)&txFlag};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline int _DMultimediaScheduleOcx::setVideoWnd(int callId, int hWnd)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&callId, (void*)&hWnd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline void _DMultimediaScheduleOcx::startVideoDispatch(wint_t* strSrcNum, wint_t* strDestNum)
{
    void *_a[] = {0, (void*)&strSrcNum, (void*)&strDestNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline int _DMultimediaScheduleOcx::startVideoRecord(const QString& strFileName, int callId)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strFileName, (void*)&callId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void _DMultimediaScheduleOcx::stopVideoDispatch(wint_t* strChanName, wint_t* strDestNum)
{
    void *_a[] = {0, (void*)&strChanName, (void*)&strDestNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void _DMultimediaScheduleOcx::stopVideoRecord(int callId)
{
    void *_a[] = {0, (void*)&callId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void _DMultimediaScheduleOcx::subscribeAllPttGroupInfo()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline int _DMultimediaScheduleOcx::subscribeUserState(const QString& number, int type)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&number, (void*)&type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void _DMultimediaScheduleOcx::switchGroup(wint_t* csGroupNum)
{
    void *_a[] = {0, (void*)&csGroupNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline int _DMultimediaScheduleOcx::takeVideoPicture(const QString& strFileName, int callId)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strFileName, (void*)&callId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline void _DMultimediaScheduleOcx::unregisterSip()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline int _DMultimediaScheduleOcx::videoMeetAddMember(wint_t* strMeetID, wint_t* memberSip)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strMeetID, (void*)&memberSip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::videoMeetDelMember(wint_t* strMeetID, wint_t* memberSip)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strMeetID, (void*)&memberSip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline int _DMultimediaScheduleOcx::videoMeetPlayVideo(int hWnd, int nCallId, wint_t* strSipNum)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&hWnd, (void*)&nCallId, (void*)&strSipNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}


inline void MultimediaScheduleOcx::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline int MultimediaScheduleOcx::answerCall(int callId, int nHand)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&callId, (void*)&nHand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::audioMeetAddMember(wint_t* strMeetID, wint_t* memberSip)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strMeetID, (void*)&memberSip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::audioMeetDelMember(wint_t* strMeetID, wint_t* memberSip)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strMeetID, (void*)&memberSip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline void MultimediaScheduleOcx::callThroughConn(int nCallId, wint_t* strDestSip)
{
    void *_a[] = {0, (void*)&nCallId, (void*)&strDestSip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline int MultimediaScheduleOcx::createAudioBroadcast(const QString& strMembers, int nHand, const QString& filePath)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strMembers, (void*)&nHand, (void*)&filePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::createAudioMeet(wint_t* strMembers, int nHand)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strMembers, (void*)&nHand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline void MultimediaScheduleOcx::createPttGroupURL(wint_t* strServer, int nPort, wint_t* groupID, wint_t* strGroupName, wint_t* strMySip, wint_t* strMembers)
{
    void *_a[] = {0, (void*)&strServer, (void*)&nPort, (void*)&groupID, (void*)&strGroupName, (void*)&strMySip, (void*)&strMembers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline int MultimediaScheduleOcx::createVideoMeet(wint_t* memberSip, int nHand)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&memberSip, (void*)&nHand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline void MultimediaScheduleOcx::delTempPttGroup(wint_t* strBigGroupID, wint_t* strSmallGroupID)
{
    void *_a[] = {0, (void*)&strBigGroupID, (void*)&strSmallGroupID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
}

inline void MultimediaScheduleOcx::deletePttGroupURL(wint_t* strServer, int nPort, wint_t* groupID)
{
    void *_a[] = {0, (void*)&strServer, (void*)&nPort, (void*)&groupID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void MultimediaScheduleOcx::destroyOcx()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void MultimediaScheduleOcx::endPtt(wint_t* csGroupNum)
{
    void *_a[] = {0, (void*)&csGroupNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline int MultimediaScheduleOcx::endVideoMeet(int nCallId)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&nCallId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline QString MultimediaScheduleOcx::getAudioDeviceList()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline QString MultimediaScheduleOcx::getCurrentGroup()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline QString MultimediaScheduleOcx::getDefaultGroup()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::getGroupState(wint_t* pttGroupNum)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pttGroupNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::getPhysicsHandCount()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::getPttGroupMemberState(wint_t* strGroupID, wint_t* strMemberID)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strGroupID, (void*)&strMemberID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::hangUpCall(int callId)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&callId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::isVideoConversation(int callId)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&callId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::makeAudioCall(const QString& destNumber, int nHand)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&destNumber, (void*)&nHand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::makeAudioCallWithFile(const QString& destNumber, const QString& filePath)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&destNumber, (void*)&filePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::makePttCall(wint_t* dest, int audioDev, int join)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dest, (void*)&audioDev, (void*)&join};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::makeVideoCall(const QString& destNumber, int hWnd, int nHand)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&destNumber, (void*)&hWnd, (void*)&nHand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::makeVideoMonitorCall(const QString& destNumber, int nHand)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&destNumber, (void*)&nHand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline void MultimediaScheduleOcx::modifyPttGroupURL(wint_t* strServer, int nPort, wint_t* groupID, wint_t* strGroupName, wint_t* strMySip, wint_t* strMembers)
{
    void *_a[] = {0, (void*)&strServer, (void*)&nPort, (void*)&groupID, (void*)&strGroupName, (void*)&strMySip, (void*)&strMembers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline void MultimediaScheduleOcx::ptzControl(wint_t* strSIP, wint_t* strControlType, bool isDown)
{
    void *_a[] = {0, (void*)&strSIP, (void*)&strControlType, (void*)&isDown};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline QString MultimediaScheduleOcx::queryVideoDispatch()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::registerSip(const QString& user, const QString& pwd, const QString& server, int port)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&user, (void*)&pwd, (void*)&server, (void*)&port};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::remoteControlLocation(wint_t* strDestSip, bool bOpen)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strDestSip, (void*)&bOpen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline void MultimediaScheduleOcx::requestPtt(int opt)
{
    void *_a[] = {0, (void*)&opt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
}

inline int MultimediaScheduleOcx::sendSMS(const QString& strSIP, const QString& strContent)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strSIP, (void*)&strContent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::sendSmsEx(const QString& strSIP, const QString& strContent, const QString& extension, const QString& strType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strSIP, (void*)&strContent, (void*)&extension, (void*)&strType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::setAudioDeviceIndex(int type, int sIndex, int mIndex)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&type, (void*)&sIndex, (void*)&mIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::setConfigInfo(const QString& key, const QString& value)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&key, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::setMute(int callId, bool bMute)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&callId, (void*)&bMute};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::setMuteEx(int callId, bool bRx, bool bMute)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&callId, (void*)&bRx, (void*)&bMute};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
    return qax_result;
}

inline uint MultimediaScheduleOcx::setPreviewWindow(uint hWnd)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&hWnd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
    return qax_result;
}

inline void MultimediaScheduleOcx::setTempPttGroup(wint_t* strLargeGroupNo, wint_t* strGroupName, wint_t* strGroupMember)
{
    void *_a[] = {0, (void*)&strLargeGroupNo, (void*)&strGroupName, (void*)&strGroupMember};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
}

inline int MultimediaScheduleOcx::setVideoBitRate(int nBitRate)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&nBitRate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::setVideoInfo(int nDropeedFrame, int nBuffer, int nPlayMode)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&nDropeedFrame, (void*)&nBuffer, (void*)&nPlayMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::setVideoResolution(int nWidth, int nHeight)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&nWidth, (void*)&nHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
    return qax_result;
}

inline void MultimediaScheduleOcx::setVideoRotate(int callId, bool bClockWise)
{
    void *_a[] = {0, (void*)&callId, (void*)&bClockWise};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}

inline void MultimediaScheduleOcx::setVideoTransmit(int call_id, int txFlag)
{
    void *_a[] = {0, (void*)&call_id, (void*)&txFlag};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
}

inline int MultimediaScheduleOcx::setVideoWnd(int callId, int hWnd)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&callId, (void*)&hWnd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
    return qax_result;
}

inline void MultimediaScheduleOcx::startVideoDispatch(wint_t* strSrcNum, wint_t* strDestNum)
{
    void *_a[] = {0, (void*)&strSrcNum, (void*)&strDestNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
}

inline int MultimediaScheduleOcx::startVideoRecord(const QString& strFileName, int callId)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strFileName, (void*)&callId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
    return qax_result;
}

inline void MultimediaScheduleOcx::stopVideoDispatch(wint_t* strChanName, wint_t* strDestNum)
{
    void *_a[] = {0, (void*)&strChanName, (void*)&strDestNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline void MultimediaScheduleOcx::stopVideoRecord(int callId)
{
    void *_a[] = {0, (void*)&callId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}

inline void MultimediaScheduleOcx::subscribeAllPttGroupInfo()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
}

inline int MultimediaScheduleOcx::subscribeUserState(const QString& number, int type)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&number, (void*)&type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
    return qax_result;
}

inline void MultimediaScheduleOcx::switchGroup(wint_t* csGroupNum)
{
    void *_a[] = {0, (void*)&csGroupNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
}

inline int MultimediaScheduleOcx::takeVideoPicture(const QString& strFileName, int callId)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strFileName, (void*)&callId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 109, _a);
    return qax_result;
}

inline void MultimediaScheduleOcx::unregisterSip()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
}

inline int MultimediaScheduleOcx::videoMeetAddMember(wint_t* strMeetID, wint_t* memberSip)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strMeetID, (void*)&memberSip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 111, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::videoMeetDelMember(wint_t* strMeetID, wint_t* memberSip)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strMeetID, (void*)&memberSip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 112, _a);
    return qax_result;
}

inline int MultimediaScheduleOcx::videoMeetPlayVideo(int hWnd, int nCallId, wint_t* strSipNum)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&hWnd, (void*)&nCallId, (void*)&strSipNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 113, _a);
    return qax_result;
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<MultimediaScheduleOcxLib::_DMultimediaScheduleOcx, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MultimediaScheduleOcxLib::_DMultimediaScheduleOcx*>(t)->MultimediaScheduleOcxLib::_DMultimediaScheduleOcx::~_DMultimediaScheduleOcx();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MultimediaScheduleOcxLib::_DMultimediaScheduleOcx;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MultimediaScheduleOcxLib::_DMultimediaScheduleOcx*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MultimediaScheduleOcxLib::_DMultimediaScheduleOcx*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MultimediaScheduleOcxLib::MultimediaScheduleOcx, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MultimediaScheduleOcxLib::MultimediaScheduleOcx*>(t)->MultimediaScheduleOcxLib::MultimediaScheduleOcx::~MultimediaScheduleOcx();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MultimediaScheduleOcxLib::MultimediaScheduleOcx;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MultimediaScheduleOcxLib::MultimediaScheduleOcx*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MultimediaScheduleOcxLib::MultimediaScheduleOcx*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

